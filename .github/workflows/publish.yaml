# This is just an example workflow for provision.
# You should customize it to meet your own requirements.
name: 'Provision'

on:
  push:
    branches:
      - main
  # Manually trigger this workflow, and you should pick the right branch.
jobs:
  publishTeamsApp:
    runs-on: ubuntu-latest
    # You can uncomment the line below to use environments (refer to https://docs.github.com/en/actions/reference/environments). 
    #environment: test_environment
    env:
      M365_ACCOUNT_NAME: Aadharsha@developerworks.onmicrosoft.com
      M365_ACCOUNT_PASSWORD: Testdevelopment123$
      M365_TENANT_ID: 62edfd41-1282-4e35-b9da-c6a75c0b31a9
      # To specify the environment name which will be used as an option below.
      # You can change it to use your own environment name.
      TEAMSFX_ENV_NAME: 'dev'
      # To specify the version of TTK CLI for use.
      TEAMSFX_CLI_VERSION: 2.*

    steps:
      # Setup environment.
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Checkout the code
        uses: actions/checkout@v2

      # Login Azure by service principal.
      # Service principal for Azure is used, and to create Azure service principal for use, refer to https://github.com/OfficeDev/TeamsFx/tree/dev/docs/cicd_insider#how-to-create-azure-service-principals-for-use.
      # - name: Login Azure by service principal 
      #   uses: OfficeDev/teamsfx-cli-action@v1
      #   with:
      #     cli-version: ${{env.TEAMSFX_CLI_VERSION}}
      #     commands: account login azure 
      #     service-principal: true
      #     username: a1297e34-9ef0-4030-a16e-24d95d964f2a
      #     password: Gil8Q~I1YKpF_gEHCrGwSSnCrGD8YYqBx.YG8awD
      #     tenant: 62edfd41-1282-4e35-b9da-c6a75c0b31a9
      # - name: 'Az CLI login'
      #   uses: azure/login@v1
      #   with:
      #     client-id: 5bddeabc-cf83-4b05-9ae7-2496be0af7f6
      #     tenant-id: 62edfd41-1282-4e35-b9da-c6a75c0b31a9
      #     subscription-id: 8da5ea31-eccb-4d99-8a1a-437ea5504220
      # We suggest to do the `teamsfx provision` step manually or in a separate workflow. The following steps are for your reference.
      # After provisioning, you should commit necessary files into the repository.
      - name: Run Script
        run: |
          npm install @microsoft/teamsfx
          az login --allow-no-subscriptions
          teamsfx provision --interactive false
        continue-on-error: true
      # - name: Provision hosting environment
      #   uses: OfficeDev/teamsfx-cli-action@v1
      #   with:
      #     cli-version: ${{env.TEAMSFX_CLI_VERSION}}
      #     commands: provision
      #     env: dev

      # - name: Package Teams App for publishing
      #   uses: OfficeDev/teamsfx-cli-action@v1
      #   with:
      #     cli-version: ${{env.TEAMSFX_CLI_VERSION}}
      #     commands: package
      #     env: dev

      # # - name: Upload Teams App's package as artifact
      # #   uses: actions/upload-artifact@v2
      # #   with:
      # #     name: appPackage
      # #     path: appPackage/build/appPackage.dev.zip

      # - name: Publish Teams App
      #   uses: OfficeDev/teamsfx-cli-action@v1
      #   with:
      #     cli-version: ${{env.TEAMSFX_CLI_VERSION}}
      #     commands: publish
      #     env: dev
      # # - name: Commit provision configs if necessary
      # #   env:
      # #     BRANCH: ${{github.ref}}
      # #   run: |
      # #     git config user.name "github-agent"
      # #     git config user.email "github-agent@github.com"
      # #     git add .
      # #     git commit -m "chore: commit provision configs"
      # #     git push origin ${BRANCH}
